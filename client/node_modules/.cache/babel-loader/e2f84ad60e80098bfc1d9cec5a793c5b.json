{"ast":null,"code":"var _jsxFileName = \"/home/dobromir/Documents/React/reduxstructure/src/utils/routesUtils/AuthRoute.js\";\nimport React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst AuthRoute = ({\n  component: Component,\n  isAuth,\n  ...rest\n}) => React.createElement(Route, Object.assign({}, rest, {\n  render: props => isAuth ? React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  })) : React.createElement(Redirect, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}));\n\nfunction mapStateToProps(state) {\n  return {\n    isAuth: state.user.isAuth\n  };\n}\n\nexport default connect(mapStateToProps)(AuthRoute);","map":{"version":3,"sources":["/home/dobromir/Documents/React/reduxstructure/src/utils/routesUtils/AuthRoute.js"],"names":["React","Component","Route","Redirect","connect","AuthRoute","component","isAuth","rest","props","mapStateToProps","state","user"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAIA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,SAAS,EAAGL,SAAb;AAAuBM,EAAAA,MAAvB;AAA8B,KAAGC;AAAjC,CAAD,KAEd,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,EAAA,MAAM,EAAEC,KAAK,IAAIF,MAAM,GAAI,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ,GAAiC,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFJ;;AAKA,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAC3B,SAAO;AACHJ,IAAAA,MAAM,EAAGI,KAAK,CAACC,IAAN,CAAWL;AADjB,GAAP;AAGH;;AAED,eAAeH,OAAO,CAACM,eAAD,CAAP,CAAyBL,SAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {connect} from 'react-redux';\n\n\n\nconst AuthRoute = ({component : Component,isAuth,...rest}) => (\n\n    <Route {...rest} render={props => isAuth ? (<Component {...props} />) : (<Redirect to=\"/\"/>)} />\n);\n\nfunction mapStateToProps(state){\n    return {\n        isAuth : state.user.isAuth\n    }\n}\n\nexport default connect(mapStateToProps)(AuthRoute);"]},"metadata":{},"sourceType":"module"}